AWSTemplateFormatVersion: 2010-09-09
Description: Caltech CTME CloudFormation Project3
Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3a.small
    Description: Enter t3.micro, or t3a.small. Default is t3.micro.
  CTMEKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Default: caltech_project3_kp
    Description: Key Pair for CTME Project
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.0.0/24
    Public2:
      CIDR: 10.0.1.0/24
    Public3:
      CIDR: 10.0.2.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: CTMECloud
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public1
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public1
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public2
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public2
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl
  ServerEC2Prod: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0c02fb55956c7d316"
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref CTMEKeyPair
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            #Add standard path to /etc/environment
            echo 'PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin"' >> /etc/environment
            hostnamectl set-hostname ec2serverprod
            yum install ec2-instance-connect -y
            # Install git
            yum install git -y
            # Install Docker
            groupadd docker --gid 1200
            usermod -aG docker ec2-user
            yum install docker -y
            systemctl enable docker
            systemctl start docker
            curl -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            # Install Kubernetes and tools for AWS
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            # Install additional tools
            yum install -y python3
            yum groups install -y "Development Tools"
            yum install jq -y
            # Install additional pip tools for potential Ansible Setup
            python3 -m pip install -U pip
            pip3 install urllib3
            pip3 install --upgrade setuptools
            pip3 install docker-compose
            # Add Public KeyPair information to ec2-user
            su - ec2-user -c "echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCStyJptkUbhShnl0MHBd8+cw9NLUuvt/sMK9PqqcnkLD837cqYsnFuBEUlWaS2fDor9xuIEG7AfhJ7DhJrm7oBQsAjMxYXIoa2JGT/aYSJ0JAXIxjt6usrIPTAPIxAb0YTKBSRtr0tRr2o749PXdqCMOhs8qeLnG4eYK+Wqk8LHNKhUHAcYVmO72J1M8sV6P4ba0F0BtZljq+NlFqg0ZDzfp0bER1P2F8koHpq614n89Mh28X6i69s6I/w5+ZXuxv0esOrqWUJO5UVXVL0EmI/81dvUUI4BpCVhTmD/JLQSzAXFsB9KfcBq/0ah6FD+/r8PpX4p3NR2n9Cqlo7n0C/ caltech_project3_kp >> /home/ec2-user/.ssh/authorized_keys"
            # Add ansible User, .ssh, authorized_keys, and ctmeansible_kp.pem from secrets manager
            adduser ansible --uid 1500
            usermod -aG wheel ansible
            usermod -aG docker ansible
            sudo -u ansible mkdir /home/ansible/.ssh
            sudo -u ansible chmod 700 /home/ansible/.ssh
            sudo -u ansible touch /home/ansible/.ssh/authorized_keys
            sudo -u ansible chmod 600 /home/ansible/.ssh/authorized_keys
            #Copy SSH Public key from Secrets Manager to /home/ansible/.ssh/authorized_keys 
            aws secretsmanager get-secret-value --secret-id ctmeansible_kp_public --region us-east-1 --query SecretString --output text >> /home/ansible/.ssh/authorized_keys  
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "ServerSG"
        SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: Server-Prod
        - Key: Environment
          Value: Prod
        - Key: Project
          Value: Caltech-CTME-Project3
      IamInstanceProfile: !Ref RootInstanceProfile
    DependsOn: VPC
  ServerEC2Dev: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0c02fb55956c7d316"
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref CTMEKeyPair
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            #Add standard path to /etc/environment
            echo 'PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin"' >> /etc/environment
            hostnamectl set-hostname ec2serverdev
            yum install ec2-instance-connect -y
            # Install git
            yum install git -y
            # Install Docker
            groupadd docker --gid 1200
            usermod -aG docker ec2-user
            yum install docker -y
            systemctl enable docker
            systemctl start docker
            curl -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            # Install Kubernetes and tools for AWS
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            # Install additional tools
            yum install -y python3
            yum groups install -y "Development Tools"
            yum install jq -y
            # Install additional pip tools for potential Ansible Setup
            python3 -m pip install -U pip
            pip3 install urllib3
            pip3 install --upgrade setuptools
            pip3 install docker-compose
            # Add Public KeyPair information to ec2-user
            su - ec2-user -c "echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCStyJptkUbhShnl0MHBd8+cw9NLUuvt/sMK9PqqcnkLD837cqYsnFuBEUlWaS2fDor9xuIEG7AfhJ7DhJrm7oBQsAjMxYXIoa2JGT/aYSJ0JAXIxjt6usrIPTAPIxAb0YTKBSRtr0tRr2o749PXdqCMOhs8qeLnG4eYK+Wqk8LHNKhUHAcYVmO72J1M8sV6P4ba0F0BtZljq+NlFqg0ZDzfp0bER1P2F8koHpq614n89Mh28X6i69s6I/w5+ZXuxv0esOrqWUJO5UVXVL0EmI/81dvUUI4BpCVhTmD/JLQSzAXFsB9KfcBq/0ah6FD+/r8PpX4p3NR2n9Cqlo7n0C/ caltech_project3_kp >> /home/ec2-user/.ssh/authorized_keys"
            # Add ansible User, .ssh, authorized_keys, and ctmeansible_kp.pem from secrets manager
            adduser ansible --uid 1500
            usermod -aG wheel ansible
            usermod -aG docker ansible
            sudo -u ansible mkdir /home/ansible/.ssh
            sudo -u ansible chmod 700 /home/ansible/.ssh
            sudo -u ansible touch /home/ansible/.ssh/authorized_keys
            sudo -u ansible chmod 600 /home/ansible/.ssh/authorized_keys
            #Copy SSH Public key from Secrets Manager to /home/ansible/.ssh/authorized_keys 
            aws secretsmanager get-secret-value --secret-id ctmeansible_kp_public --region us-east-1 --query SecretString --output text >> /home/ansible/.ssh/authorized_keys
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "ServerSG"
        SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: Server-Dev
        - Key: Environment
          Value: Dev
        - Key: Project
          Value: Caltech-CTME-Project3
      IamInstanceProfile: !Ref RootInstanceProfile
    DependsOn: VPC
  JenkinsEC2Prod: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0c02fb55956c7d316"
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref CTMEKeyPair
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            #Add standard path to /etc/environment
            echo 'PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin"' >> /etc/environment
            hostnamectl set-hostname jenkinsserver-prod
            yum install ec2-instance-connect -y
            # Install git
            yum install git -y
            # Install Docker and docker-compose
            groupadd docker --gid 1200
            usermod -aG docker ec2-user
            yum install docker -y
            systemctl enable docker
            systemctl start docker
            curl -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            # Install Kubernetes and tools for AWS
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            # Install additional tools
            yum install python3 -y  
            yum groups install "Development Tools" -y
            yum install jq -y
            # Install additional pip tools for potential Ansible Setup
            python3 -m pip install -U pip
            pip3 install urllib3
            pip3 install --upgrade setuptools
            pip3 install docker
            # Add Public KeyPair information to ec2-user
            su - ec2-user -c "echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCStyJptkUbhShnl0MHBd8+cw9NLUuvt/sMK9PqqcnkLD837cqYsnFuBEUlWaS2fDor9xuIEG7AfhJ7DhJrm7oBQsAjMxYXIoa2JGT/aYSJ0JAXIxjt6usrIPTAPIxAb0YTKBSRtr0tRr2o749PXdqCMOhs8qeLnG4eYK+Wqk8LHNKhUHAcYVmO72J1M8sV6P4ba0F0BtZljq+NlFqg0ZDzfp0bER1P2F8koHpq614n89Mh28X6i69s6I/w5+ZXuxv0esOrqWUJO5UVXVL0EmI/81dvUUI4BpCVhTmD/JLQSzAXFsB9KfcBq/0ah6FD+/r8PpX4p3NR2n9Cqlo7n0C/ caltech_project3_kp >> /home/ec2-user/.ssh/authorized_keys"
            # Install Jenkins
            wget -O /etc/yum.repos.d/jenkins.repo "https://pkg.jenkins.io/redhat-stable/jenkins.repo"
            rpm --import "https://pkg.jenkins.io/redhat-stable/jenkins.io.key"
            amazon-linux-extras install java-openjdk11 -y
            yum install jenkins -y
            systemctl enable jenkins
            systemctl start jenkins
            # Add ansible User, .ssh, authorized_keys, and ctmeansible_kp.pem from secrets manager
            adduser ansible --uid 1500
            usermod -aG wheel ansible
            usermod -aG docker ansible
            sudo -u ansible mkdir /home/ansible/.ssh
            sudo -u ansible chmod 700 /home/ansible/.ssh
            sudo -u ansible touch /home/ansible/.ssh/authorized_keys
            sudo -u ansible chmod 600 /home/ansible/.ssh/authorized_keys
            sudo -u ansible touch /home/ansible/.ssh/ctmeansible_kp.pem
            #Copy SSH from Secrets Manager to /home/ansible/.ssh/authorized_keys Start
            aws secretsmanager get-secret-value --secret-id ctmeansible_kp_private --region us-east-1 --query SecretString --output text > ~/.ssh/ctmeansible_kp.pem
            chmod 400 ~/.ssh/ctmeansible_kp.pem
            aws secretsmanager get-secret-value --secret-id ctmeansible_kp_private --region us-east-1 --query SecretString --output text > /var/lib/jenkins/.ssh/ctmeansible_kp.pem
            chmod 400 /var/lib/jenkins/.ssh/ctmeansible_kp.pem
            chown jenkins:jenkins /var/lib/jenkins/.ssh/ctmeansible_kp.pem
            # Install Ansible
            amazon-linux-extras install ansible2 -y
            mkdir /etc/ansible/playbooks
            mv /etc/ansible/ansible.cfg /etc/ansible/ansible.cfg.old
            echo "
            [webserver1]
            ServerEC2Prod ansible_host=${ServerEC2Prod.PrivateIp}" >> /etc/ansible/hosts
            echo "
            [defaults]
            host_key_checking = False
            timeout = 30
            remote_user = ansible
            private_key_file=~/.ssh/ctmeansible_kp.pem
            interpreter_python = /usr/bin/python3
            [inventory]
            [privilege_escalation]
            [paramiko_connection]
            [ssh_connection]
            [persistent_connection]
            [accelerate]
            [selinux]
            [colors]" > /etc/ansible/ansible.cfg
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "ServerSG"
        SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: JenkinsServer-Prod
        - Key: Environment
          Value: Prod
        - Key: Project
          Value: Caltech-CTME-Project3
      IamInstanceProfile: !Ref RootInstanceProfile
    DependsOn: VPC
  JenkinsEC2Dev: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0c02fb55956c7d316"
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref CTMEKeyPair
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            #Add standard path to /etc/environment
            echo 'PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin"' >> /etc/environment
            hostnamectl set-hostname jenkinsserver-dev
            yum install ec2-instance-connect -y
            # Install git
            yum install git -y
            # Install Docker and docker-compose
            groupadd docker --gid 1200
            usermod -aG docker ec2-user
            yum install docker -y
            systemctl enable docker
            systemctl start docker
            curl -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            # Install Kubernetes and tools for AWS
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            # Install additional tools
            yum install python3 -y  
            yum groups install "Development Tools" -y
            yum install jq -y
            # Install additional pip tools for potential Ansible Setup
            python3 -m pip install -U pip
            pip3 install urllib3
            pip3 install --upgrade setuptools
            pip3 install docker-compose
            # Add Public KeyPair information to ec2-user
            su - ec2-user -c "echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCStyJptkUbhShnl0MHBd8+cw9NLUuvt/sMK9PqqcnkLD837cqYsnFuBEUlWaS2fDor9xuIEG7AfhJ7DhJrm7oBQsAjMxYXIoa2JGT/aYSJ0JAXIxjt6usrIPTAPIxAb0YTKBSRtr0tRr2o749PXdqCMOhs8qeLnG4eYK+Wqk8LHNKhUHAcYVmO72J1M8sV6P4ba0F0BtZljq+NlFqg0ZDzfp0bER1P2F8koHpq614n89Mh28X6i69s6I/w5+ZXuxv0esOrqWUJO5UVXVL0EmI/81dvUUI4BpCVhTmD/JLQSzAXFsB9KfcBq/0ah6FD+/r8PpX4p3NR2n9Cqlo7n0C/ caltech_project3_kp >> /home/ec2-user/.ssh/authorized_keys"
            # Install Jenkins
            wget -O /etc/yum.repos.d/jenkins.repo "https://pkg.jenkins.io/redhat-stable/jenkins.repo"
            rpm --import "https://pkg.jenkins.io/redhat-stable/jenkins.io.key"
            amazon-linux-extras install java-openjdk11 -y
            yum install jenkins -y
            systemctl enable jenkins
            systemctl start jenkins
            # Add ansible User, .ssh, authorized_keys, and ctmeansible_kp.pem from secrets manager
            adduser ansible --uid 1500
            usermod -aG wheel ansible
            usermod -aG docker ansible
            sudo -u ansible mkdir /home/ansible/.ssh
            sudo -u ansible chmod 700 /home/ansible/.ssh
            sudo -u ansible touch /home/ansible/.ssh/authorized_keys
            sudo -u ansible chmod 600 /home/ansible/.ssh/authorized_keys
            sudo -u ansible touch /home/ansible/.ssh/ctmeansible_kp.pem
            #Copy SSH from Secrets Manager to /home/ansible/.ssh/authorized_keys Start
            aws secretsmanager get-secret-value --secret-id ctmeansible_kp_private --region us-east-1 --query SecretString --output text > ~/.ssh/ctmeansible_kp.pem
            chmod 400 ~/.ssh/ctmeansible_kp.pem
            aws secretsmanager get-secret-value --secret-id ctmeansible_kp_private --region us-east-1 --query SecretString --output text > /var/lib/jenkins/.ssh/ctmeansible_kp.pem
            chmod 400 /var/lib/jenkins/.ssh/ctmeansible_kp.pem
            chown jenkins:jenkins /var/lib/jenkins/.ssh/ctmeansible_kp.pem
            # Install Ansible
            amazon-linux-extras install ansible2 -y
            mkdir /etc/ansible/playbooks
            mv /etc/ansible/ansible.cfg /etc/ansible/ansible.cfg.old
            echo "
            [webserver1]
            ServerEC2Dev ansible_host=${ServerEC2Dev.PrivateIp}" >> /etc/ansible/hosts
            echo "
            [defaults]
            host_key_checking = False
            timeout = 30
            remote_user = ansible
            private_key_file=~/.ssh/ctmeansible_kp.pem
            interpreter_python = /usr/bin/python3
            [inventory]
            [privilege_escalation]
            [paramiko_connection]
            [ssh_connection]
            [persistent_connection]
            [accelerate]
            [selinux]
            [colors]" > /etc/ansible/ansible.cfg
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "ServerSG"
        SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: JenkinsServer-Dev
        - Key: Environment
          Value: Dev
        - Key: Project
          Value: Caltech-CTME-Project3
      IamInstanceProfile: !Ref RootInstanceProfile
    DependsOn: VPC
  ServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow ssh to client host as well as open 80,443, and 8080 for jenkins
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 136.226.48.109/32
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole